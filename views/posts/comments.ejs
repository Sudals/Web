<div class="my-5">
    <h1 class="text-center mb-5">댓글관리</h1>
    <div id="div_insert" style="display: none;">
        <textarea id="txt_body" class="form-control" rows="5"></textarea>
        <div class="text-end mt-2">
            <button id="btn-insert" class="btn btn-primary btn-sm px-5">등록</button>
        </div>
    </div>

    <div id="div_login">
        <button class="btn btn-primary w-100">로그인</button>
    </div>
    <div>
        <div>
            댓글수 : <span id="total"></span>
        </div>
        <div id="div_comments" class="mt-5"></div>
        <div id="pagination" class="pagination justify-content-center mt-5"></div>
    </div>
</div>
<script id="temp_comments" type="x-handlebars-template">
    {{#each .}}
        <div>
            <div>
                <small><b>{{email}}</b></small>
                <small>{{date}}</samll>
            </div>
            <div class="view{{id}}">
                <div class="ellipsis2 body">{{body}}</div>
                <div class="text-end mb-2" style="{{fn_button email}}">
                <button class="btn-update btn btn-success btn-sm" id="{{id}}">수정</button>
                <button class="btn-delete btn btn-danger btn-sm" id="{{id}}">삭제</button>
                </div>
            </div>
            <div class="edit{{id}}" style="display:none;">
                <div><textarea class="body form-control" rows="5">{{body}}</textarea></div>
                <div class="text-end mt-2">
                <button class="btn-save btn btn-success btn-sm" id="{{id}}">저장</button>
                <button class="btn-cancel btn btn-danger btn-sm" id="{{id}}">취소</button>
                </div>
            </div>
        </div>
        <hr>
    {{/each}}
</script>
<script>
    Handlebars.registerHelper("fn_button",function(email){
        if(sessionStorage.getItem("email")!=email){
            return "display:none";
        }
    });
</script>
<script type="module">
    import { app } from "/javascripts/firebase.js";
    import { query,orderBy,getDocs,where,doc,getDoc ,setDoc} from "https://www.gstatic.com/firebasejs/10.4.0/firebase-firestore.js";
    import { getFirestore, collection, addDoc,deleteDoc } from "https://www.gstatic.com/firebasejs/10.4.0/firebase-firestore.js";
    const db = getFirestore(app);
    const pid="<%=id%>";
    let total =0;
    const size =3;
    let page=1;


    if(sessionStorage.getItem("email")){
        $("#div_insert,#div_login").toggle();

    }
    $("#div_comments").on("click",".body",function(){
        $(this).toggleClass("ellipsis2");
        
        
    });
    $("#div_comments").on("click",".btn-delete",async function(){
        const id=$(this).attr("id");
        if(confirm("삭제할꺼?")){
            await deleteDoc(doc(db,`/comments/${id}`));
            
            getComments();
            alert("삭제완료");
        }
        
    });
    $("#div_comments").on("click",".btn-save",async function(){
        const id=$(this).attr("id");
        const edit=$(this).parent().parent();
        const body =edit.find(".body").val();
        if(confirm("수정할려?")){
            const snapshot=await getDoc(doc(db,`comments/${id}`));
            await setDoc(doc(db,`comments/${id}`),{...snapshot.data(),body});
            getComments();
            alert("수정완료");
        }
        
    });
    $("#div_comments").on("click",".btn-update",async function(){
        const id=$(this).attr("id");
        $("#div_comments .view"+id).hide();
        $("#div_comments .edit"+id).show();
    });
    $("#div_comments").on("click",".btn-cancel",async function(){
        const id=$(this).attr("id");
        $("#div_comments .view"+id).show();
        $("#div_comments .edit"+id).hide();
    });
    $("#btn-login").on("click",function(){
        sessionStorage.setItem("target",`/posts/read?id=${pid}`)
        location.href="/users/login";

    });

    $("#btn-insert").on("click",async function(){
        const body=$("#txt_body").val();
        const date=moment(new Date()).format("YYYY-MM-DD HH:mm:ss");
        const email = sessionStorage.getItem("email");
        const data = {pid,email,body,date};
        if(body ==""){
            alert("댓글 내용을 입력하세요!");
            $("#txt_body").focus();
        }else{
            await addDoc(collection(db,'comments'),data);
            alert("댓글 등록");
            $("#txt_body").val("");
            getComments();
        }
    });

    getComments();
    async function getComments() {
        const q= query(collection(db, "comments"),where("pid","==",pid), orderBy("date", "desc"));
        const snapshot = await getDocs(q);
        if(total!=snapshot.docs.length){
            total=snapshot.docs.length;
            let totalPages = Math.ceil(total/size);
     
            $("#pagination").twbsPagination("changeTotalPages", totalPages, 1);
        }

        let rows=[];
        $("#total").html(total);
        snapshot.docs.forEach((doc,index)=>{
            const start =(page-1)*size; //0
            const end =(page*size)-1; //2
            if(index>=start && index<=end){
                const data ={id:doc.id,...doc.data()}
                rows.push(data);
            }
            
        });
        console.log(rows);
        const temp = Handlebars.compile($("#temp_comments").html());
        $("#div_comments").html(temp(rows));
    }
    $('#pagination').twbsPagination({

        totalPages:10, 

        visiblePages: 5, // 하단에서 한 번에 보여 지는 페이지 번호 수

        startPage : 1, // 시작 시 표시되는 현재 페이지

        initiateStartPageClick: false, // 플러그인이 시작 시 페이지 버튼 클릭 여부 (default : true) 

        first : '<<', // 페이지네이션 버튼 중 처음으로 돌아가는 버튼에 쓰여 있는 텍스트

        prev : '<', // 이전 페이지 버튼에 쓰여 있는 텍스트

        next : '>', // 다음 페이지 버튼에 쓰여 있는 텍스트

        last : '>>', // 페이지네이션 버튼 중 마지막으로 가는 버튼에 쓰여 있는 텍스트

    onPageClick: function (event, clickPage) {

        page=clickPage;

        getComments();

}

});

</script>